name: CI Pipeline - Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Stage 1: Build and Start Application
  build-and-deploy:
    name: Build and Start Application
    runs-on: ubuntu-latest

    services:
    # Add database service if your app needs it
    # postgres:
    #   image: postgres:13
    #   env:
    #     POSTGRES_PASSWORD: postgres
    #     POSTGRES_DB: testdb
    #   options: >-
    #     --health-cmd pg_isready
    #     --health-interval 10s
    #     --health-timeout 5s
    #     --health-retries 5
    #   ports:
    #     - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build application
        run: mvn clean compile -DskipTests

      - name: Package application
        run: mvn package -DskipTests

      - name: Upload application artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 1

      - name: Start application (background)
        run: |
          # Start your application in background
          # Adjust the jar name and port as needed
          java -jar target/*.jar --server.port=8080 &
          echo $! > app.pid
          
          # Wait for application to be ready
          echo "Waiting for application to start..."
          timeout=60
          while ! curl -f http://localhost:8080/actuator/health 2>/dev/null; do
            if [ $timeout -le 0 ]; then
              echo "Application failed to start within 60 seconds"
              exit 1
            fi
            sleep 2
            timeout=$((timeout-2))
          done
          echo "Application is ready and running on port 8080!"

      - name: Keep application running
        run: |
          echo "Application is running with PID: $(cat app.pid)"
          echo "Application will stay running for automation tests..."
          # Keep the job alive to maintain the running application
          sleep 30

    outputs:
      app-status: success

  # Stage 2: Run Automation Tests
  automation-tests:
    name: Run REST Assured Automation Tests
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: needs.build-and-deploy.result == 'success'

    services:
    # Add same services as build stage if needed
    # postgres:
    #   image: postgres:13
    #   env:
    #     POSTGRES_PASSWORD: postgres
    #     POSTGRES_DB: testdb
    #   options: >-
    #     --health-cmd pg_isready
    #     --health-interval 10s
    #     --health-timeout 5s
    #     --health-retries 5
    #   ports:
    #     - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Download application artifact
        uses: actions/download-artifact@v3
        with:
          name: application-jar
          path: target/

      - name: Start application for testing
        run: |
          # Start the application in background for testing
          java -jar target/*.jar --server.port=8080 &
          echo $! > app.pid
          
          # Wait for application to be ready
          echo "Starting application for automation tests..."
          timeout=60
          while ! curl -f http://localhost:8080/actuator/health 2>/dev/null; do
            if [ $timeout -le 0 ]; then
              echo "Application failed to start within 60 seconds"
              exit 1
            fi
            sleep 2
            timeout=$((timeout-2))
          done
          echo "Application is ready for testing!"

      - name: Run REST Assured automation tests
        run: |
          echo "Running REST Assured automation tests..."
          
          # Set environment variables for tests
          export BASE_URI=http://localhost:8080
          export TEST_ENV=ci
          
          # Run automation tests with REST Assured
          # Adjust test patterns based on your naming convention
          mvn test -Dtest="**/*IntegrationTest,**/*IT,**/*AutomationTest" \
                   -Dmaven.test.failure.ignore=false \
                   -Dbase.uri=$BASE_URI

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            echo "Stopping application..."
            kill $(cat app.pid) || true
            rm app.pid
            echo "Application stopped"
          fi

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: automation-test-reports
          path: |
            target/surefire-reports/
            target/site/

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: REST Assured Automation Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit