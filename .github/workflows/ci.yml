name: RestAssured Test Suite with API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'src/test/resources/TestSuites/regressionTest.xml'
        type: choice
        options:
          - src/test/resources/TestSuites/regressionTest.xml
          - src/test/resources/TestSuites/smokeTest.xml
          - src/test/resources/TestSuites/authTest.xml
      api_branch:
        description: 'API branch to test against'
        required: false
        default: 'main'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the test repository (current repo)
      - name: Checkout test repository
        uses: actions/checkout@v4
        with:
          path: tests

      # Checkout the API repository
      - name: Checkout API repository
        uses: actions/checkout@v4
        with:
          repository: Modealf/TimeDepositAPI
          ref: ${{ github.event.inputs.api_branch || 'main' }}
          path: api
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup environments
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build and start the API
      - name: Restore .NET dependencies
        run: dotnet restore
        working-directory: ./api

      - name: Build .NET API
        run: dotnet build --no-restore --configuration Release
        working-directory: ./api

      - name: Start .NET API in background
        run: |
          cd api
          echo "Starting API..."
          nohup dotnet run --configuration Release --urls "http://localhost:5000" > ../api.log 2>&1 &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "Started API with PID: $API_PID"
          echo "Waiting a moment for API to initialize..."
          sleep 5
        env:
          ASPNETCORE_ENVIRONMENT: Development

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to start on http://localhost:5000..."
          max_attempts=60
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Checking API..."
          
            # Try different endpoints that might exist
            if curl -f http://localhost:5000/health >/dev/null 2>&1; then
              echo "✅ API health endpoint is ready!"
              break
            elif curl -f http://localhost:5000 >/dev/null 2>&1; then
              echo "✅ API root endpoint is ready!"
              break
            elif curl -s http://localhost:5000 >/dev/null 2>&1; then
              echo "✅ API is responding!"
              break
            fi
          
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ API failed to start after $max_attempts attempts"
              echo "=== API Logs ==="
              cat api.log || echo "No API logs found"
              echo "=== Process List ==="
              ps aux | grep dotnet || echo "No dotnet processes found"
              exit 1
            fi
          
            echo "API not ready yet, waiting 2 seconds..."
            sleep 2
            attempt=$((attempt + 1))
          done
          
          echo "✅ API is ready! Testing connection..."
          curl -v http://localhost:5000 || echo "API responding but curl failed"

      # Run the tests
      - name: Clean and compile tests
        run: mvn clean compile
        working-directory: ./tests

      - name: Run tests against API
        run: |
          cd tests
          echo "Running tests against API at http://localhost:5000"
          
          if [ "${{ github.event.inputs.test_suite }}" != "" ]; then
            mvn clean install -Dfile="${{ github.event.inputs.test_suite }}"
          else
            mvn clean install -Dfile="src/test/resources/TestSuites/regressionTest.xml"
          fi
        env:
          BASE_URL: http://localhost:5000
        continue-on-error: true

      # Cleanup and reporting
      - name: Show API logs
        if: always()
        run: |
          echo "=== API Logs ==="
          cat api.log || echo "No API logs found"
          echo "=== API Process Status ==="
          ps aux | grep dotnet || echo "No dotnet processes found"

      - name: Stop .NET API
        if: always()
        run: |
          echo "Stopping API..."
          if [ ! -z "$API_PID" ]; then
            echo "Killing API process with PID: $API_PID"
            kill $API_PID || true
          fi
          
          # Also kill any remaining dotnet processes
          pkill -f "dotnet run" || true
          echo "API stopped"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            tests/target/surefire-reports/
            tests/test-output/
          retention-days: 30

      - name: Upload extent reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extent-reports
          path: |
            tests/ExtentReports/
            tests/reports/
          retention-days: 30

      - name: Upload API logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-logs
          path: api.log
          retention-days: 7